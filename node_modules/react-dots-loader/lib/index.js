'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactCleanProps = require('react-clean-props');

var _reactCleanProps2 = _interopRequireDefault(_reactCleanProps);

var _reactInlineBlock = require('react-inline-block');

var _reactInlineBlock2 = _interopRequireDefault(_reactInlineBlock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CLASS_PREFIX = ' react-dots-loader';
var CIRCLE_CLASSNAME = ' ' + CLASS_PREFIX + '__circle';
var INDEXES = {
  0: 'one',
  1: 'two',
  2: 'three'
};

var Loader = function (_React$Component) {
  _inherits(Loader, _React$Component);

  function Loader() {
    _classCallCheck(this, Loader);

    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).apply(this, arguments));
  }

  _createClass(Loader, [{
    key: 'render',
    value: function render() {
      var props = this.props;

      if (props.visible == null || props.visible === false) {
        return null;
      }

      var className = ((props.className || '') + CLASS_PREFIX).trim();

      var circleStyle = {
        marginLeft: props.distance,
        width: props.size,
        height: props.size,
        background: props.color
      };

      var oneStyle = _extends({}, circleStyle, { marginLeft: 0 });
      var twoStyle = circleStyle;
      var threeStyle = circleStyle;

      return _react2.default.createElement(
        _reactInlineBlock2.default,
        _extends({}, (0, _reactCleanProps2.default)(props, Loader.propTypes), {
          className: className,
          size: null,
          color: null
        }),
        this.renderDot(0, oneStyle),
        this.renderDot(1, twoStyle),
        this.renderDot(2, threeStyle)
      );
    }
  }, {
    key: 'renderDot',
    value: function renderDot(index, style) {
      var className = CIRCLE_CLASSNAME + CIRCLE_CLASSNAME + '--' + INDEXES[index];
      var props = {
        style: style,
        className: className
      };

      var result = void 0;

      if (typeof this.props.renderDot === 'function') {
        result = this.props.renderDot(props);
      }

      if (result === undefined) {
        result = _react2.default.createElement(_reactInlineBlock2.default, props);
      }

      return result;
    }
  }]);

  return Loader;
}(_react2.default.Component);

exports.default = Loader;


Loader.defaultProps = {
  visible: true,
  distance: 10,
  size: 18
};
Loader.propTypes = {
  visible: _propTypes2.default.bool,
  distance: _propTypes2.default.number,
  size: _propTypes2.default.number,
  renderDot: _propTypes2.default.func
};